security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username
    role_hierarchy:
            ROLE_SUP_CARAV:   [ROLE_AG_CARAV]
            ROLE_AG_BOUT:     [ROLE_AG_CARAV,ROLE_AG_SMS, ROLE_AG_EXPRESS, ROLE_GP]
            ROLE_SUP_BOUT:    [ROLE_AG_BOUT, ROLE_CONS_CLIENT]
            ROLE_CONTROLEUR:  [ROLE_SUP_BOUT,ROLE_SUP_CARAV]
            ROLE_ADMIN:       [ROLE_CONTROLEUR,ROLE_GP,ROLE_CONS_CLIENT]
            ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH, ROLE_DG, ROLE_DIR_AG]

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        go_login_firewall:
                    pattern:  ^login$
                    security: false
        #
        main:
            pattern: ^/
            provider: app_user_provider
            form_login:
                login_path: app_login
                check_path: app_login
                enable_csrf: true
                default_target_path: choose_working_shop

            logout:
                path: /logout
                target: /login
                invalidate_session: true
            access_denied_handler: "App\\Security\\AccessDeniedHandler"

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN}

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon

##jms_security_extra:
#   # secure_all_services: false
#    #expressions: true
#
#security:
#    encoders:
#        GO\UserBundle\Entity\User: sha512
#
#    role_hierarchy:
#        ROLE_SUP_CARAV:   [ROLE_AG_CARAV]
#        ROLE_AG_BOUT:     [ROLE_AG_CARAV,ROLE_AG_SMS, ROLE_AG_EXPRESS, ROLE_GP]
#        ROLE_SUP_BOUT:    [ROLE_AG_BOUT, ROLE_CONS_CLIENT]
#        ROLE_CONTROLEUR:  [ROLE_SUP_BOUT,ROLE_SUP_CARAV]
#        ROLE_ADMIN:       [ROLE_CONTROLEUR,ROLE_GP,ROLE_CONS_CLIENT]
#        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH, ROLE_DG, ROLE_DIR_AG]
#
#    providers:
#        my_provider:
#            id: fos_user.user_provider.username
#
#
#    firewalls:
#        dev:
#            pattern:  ^/(_(profiler|wdt)|css|images|js)/
#            security: false
#        go_login_firewall:
#            pattern:  ^/login$
#            security: false
#
#        go_main_firewall:
#            pattern:  ^/
#            anonymous: false
#            provider: my_provider
#            form_login:
#                login_path: fos_user_security_login
#                check_path: fos_user_security_check
#                default_target_path: go_main_app_selection
#                always_use_default_target_path: true
#            logout:
#                path: fos_user_security_logout
#                target: fos_user_security_login
#            access_denied_handler: go.security.access_denied_handler
#    access_control:
#        - { path: ^/shop, roles: ROLE_AG_BOUT}
#        - { path: ^/caravane, roles: ROLE_AG_CARAV}
#        - { path: ^/admin, roles: ROLE_ADMIN}
#        - { path: ^/consulting, roles: ROLE_GP}